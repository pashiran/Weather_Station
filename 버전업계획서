-기상청 api 호출 방법
 예보버전조회 후 버전에 업데이트되었냐에 따라 예보를 호출하면 될 듯
 

-위치 확인 및 좌표 변환
 웹서버를 만들어 주소를 등록하도록 하고, 그 주소를 통해 좌표를 변환하는 방법도 가능할 듯

-WiFi 설정 개선
 WiFiManager 라이브러리를 사용하여 스마트폰으로 WiFi 정보를 입력받도록 개선
 기존: 하드코딩된 WiFi 정보 → 개선: 웹 페이지를 통한 동적 설정

-위치 정보 입력 방식 검토
 GPS 방식 vs 주소 입력 방식 비교분석 완료
 결론: 주소 기반 방식이 날씨 스테이션 용도에 더 적합
 - 하드웨어 비용 절약 (GPS 모듈 불필요)
 - 실내 사용 가능 (GPS 신호 제약 없음)
 - API 의존성 낮음 (1개 API만 호출)
 - 안정성 높음

-주소 검색 API 활용 방안
 행정안전부 도로명주소 API (juso.go.kr) 활용
 ESP32가 중계 서버 역할하여 CORS 문제 해결
 사용자 → ESP32 웹서버 → juso.go.kr → ESP32 → 사용자

-API별 위치 정보 요구사항 정리
 1. 기상청 단기예보: 격자 X,Y 좌표 (nx, ny)
 2. 기상청 중기예보: 지점번호 (stnId), 구역코드 (regId)
 3. 에어코리아 미세먼지: 측정소명 (stationName)

-E-Ink 디스플레이 출력 시스템 설계
 모듈형 구조로 설계하여 유지보수성 향상
 
 구성요소:
 1. WeatherData.h - 날씨 데이터 구조체 정의
    - CurrentConditions: 현재 날씨 (온도, 습도, 풍속, 날씨상태)
    - TodayForecast: 오늘 예보 (최저/최고온도, 강수확률, 풍속)
    - WeeklyForecast: 주간 예보 (7일간 최저/최고온도, 날씨상태)
    - AirQuality: 미세먼지 정보 (PM10, PM2.5 농도/등급)

 2. WeatherIcons.h - 날씨 아이콘 XBM 비트맵 정의
    - 맑음, 흐림, 비, 눈 아이콘 (64x64 픽셀)
    - PROGMEM 저장으로 메모리 효율성 확보

 3. DisplayManager.h/.cpp - 디스플레이 제어 클래스
    - 3단계 레벨별 레이아웃 지원
    - Level 1: 현재 날씨만 (작은 화면용)
    - Level 2: 현재 + 오늘 예보 (중간 화면용)  
    - Level 3: 현재 + 오늘 + 주간 예보 (큰 화면용)

-화면 크기별 데이터 출력 계획
 Level 1 (기본): 현재날씨, 현재온도, 현재습도, 현재풍속
 Level 2 (중간): 오늘날씨, 강수확률, 최저/최고온도, 현재온도, 풍속
 Level 3 (상세): 1주간 최저/최고온도, 날씨상태 (내일부터 7일간)

전자잉크 사이즈 혹은 모니터 해상도에 따라 데이터를 선별해 출력할 것
모니터별 해상도
1.54 전자잉크 : 152x152, 200x200
2.13 전자잉크 : 122x250, 104x212
2.9 전자잉크 : 128x296
4.2 전자잉크 : 400x300
7 전자잉크(필요할까?) : 800x480

한글 출력과 이미지 출력을 테스트하여 전자잉크별 적절한 폰트와 사이즈를 정해두어야 할 듯. 
이후 프레임을 구성할 때 해당 폰트와 사이즈를 적용하여 출력하도록 한다.

OLED
0.9 : 128x32
1.3 : 128x64

TFT LCD

한글 출력 구현 생각해볼것. 
